#!/usr/bin/env -S npx tsx

import { readdir, writeFile } from 'fs/promises';
import path from 'path';

const IMPORT_ALIAS = '@repo/enums';
const OUTPUT_PATH = 'src/enums.ts';

const targetDir = process.argv[2];
if (!targetDir) {
  console.error('❌ Please provide the target directory for your enums.');
  process.exit(1);
}

const fullPath = path.resolve(process.cwd(), targetDir);

console.log(`🌀 Generating a Zod schema file for enums in "${targetDir}"...`);

const files = await readdir(fullPath);
const enumFiles = files.filter(
  (file) => file.endsWith('.ts') && file !== 'index.ts',
);

if (enumFiles.length === 0) {
  console.log('🟡 No enum files found to process.');
  process.exit(0);
}

const enumNames: string[] = [];
const schemaLines: string[] = [];

for (const file of enumFiles) {
  const { name: enumName } = path.parse(file);
  enumNames.push(enumName);
  schemaLines.push(`export const ${enumName}Schema = z.enum(${enumName});`);
}

// Sort for consistent file output
enumNames.sort();
schemaLines.sort();

const finalContent = `/**
 * @file Automatically generated by a custom script.
 */

import { z } from 'zod';
import { ${enumNames.join(', ')} } from '${IMPORT_ALIAS}';

${schemaLines.join('\n\n')}
`;

const outputFilePath = path.join(OUTPUT_PATH);
await writeFile(outputFilePath, finalContent);

console.log(`✅ Generated enums schema`);

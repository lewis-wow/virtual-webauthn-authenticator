datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "generated/client"
  moduleFormat  = "esm"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

model User {
  id                  String               @id
  name                String
  email               String
  emailVerified       Boolean              @default(false)
  image               String?
  sessions            Session[]
  accounts            Account[]
  permissions         Permission[]
  webAuthnCredentials WebAuthnCredential[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Permission {
  id String @id @default(cuid())

  action       PermissionAction // e.g., READ, CREATE
  resourceType ResourceType // e.g., API_KEYS, PRODUCTS

  // Optionally, specify a single resource ID this permission applies to.
  // If null, it applies to all resources of the given type.
  resourceId String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A user can only have one type of action for a specific resource type/ID combination.
  @@unique([userId, action, resourceType, resourceId])
  @@map("permission")
}

model WebAuthnCredential {
  id                    String   @id @default(cuid())
  name                  String?
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  keyVaultKeyId         String   @unique
  credentialIDbase64url String   @unique
  publicKey             Bytes
  counter               Int      @default(0)
  aaguid                String
  transports            String[]

  // ++ DISCOVERABILITY FIELDS ADDED ++
  // The Relying Party ID (e.g., "your-website.com") this credential is scoped to.
  // This is essential for finding all credentials for a specific site.
  rpId String

  // The user's unique identifier stored on the authenticator.
  // This is returned during a passwordless login to identify the user.
  userHandle Bytes

  hsm       Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([rpId]) // Add an index to rpId for fast lookups
  @@map("webAuthnCredential")
}

enum ResourceType {
  API_KEYS
  CREDENTIALS
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
}

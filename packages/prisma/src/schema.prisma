// datasource and generator remain the same
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "generated/client"
  moduleFormat  = "esm"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

// -- AUTH & USER MODELS --

model User {
  id String @id

  name          String
  email         String       @unique
  emailVerified Boolean      @default(false)
  image         String?
  sessions      Session[]
  accounts      Account[]
  permissions   Permission[]
  apiKeys       ApiKey[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Session {
  id String @id

  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model Account {
  id String @id

  providerId            String // e.g., 'google', 'github'
  providerAccountId     String // The user's ID from the provider
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([providerId, providerAccountId]) // Ensure a user can only link an account once per provider
  @@map("account")
}

model Verification {
  id String @id

  identifier String // e.g., the email address
  token      String   @unique // The verification token or code
  expiresAt  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, token]) // A token should be unique for its identifier
  @@map("verification")
}

// -- PERMISSIONS & API KEYS --

model ApiKey {
  id String @id @default(cuid())

  name        String?
  prefix      String   @unique // A short, unique prefix for the key (e.g., 'sk_live')
  key         String   @unique // The hashed API key
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions String[] // List of granted permissions, e.g., ["products:read", "orders:write"]

  // Token Bucket / Refill settings
  refillInterval Int?
  refillAmount   Int?
  lastRefillAt   DateTime?
  remaining      Int?

  // General settings & metadata
  enabled     Boolean   @default(true)
  expiresAt   DateTime?
  lastRequest DateTime?
  metadata    Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("apiKey")
}

// Simplified Permission Model
model Permission {
  id String @id @default(cuid())

  action       PermissionAction // e.g., READ, CREATE
  resourceType ResourceType // e.g., API_KEYS, PRODUCTS

  // Optionally, specify a single resource ID this permission applies to.
  // If null, it applies to all resources of the given type.
  resourceId String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A user can only have one type of action for a specific resource type/ID combination.
  @@unique([userId, action, resourceType, resourceId])
  @@map("permission")
}

enum ResourceType {
  API_KEYS
  CREDENTIALS
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
}

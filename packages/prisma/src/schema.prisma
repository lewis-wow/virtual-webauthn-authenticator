datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider     = "prisma-client-js"
  output       = "generated/client"
  moduleFormat = "esm"
}

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean    @default(false)
  image         String?
  sessions      Session[]
  accounts      Account[]
  userRoles     UserRole[]
  apiTokens     ApiToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("verification")
}

model ApiToken {
  accessToken String   @unique
  userId      String
  expiresAt   DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRole {
  userId String
  roleId String

  assignedAt DateTime @default(now())
  // assignedBy String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model Role {
  id              String           @id @default(cuid())
  name            RoleName         @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

enum RoleName {
  OWNER
}

model RolePermission {
  roleId       String
  permissionId String

  assignedAt DateTime @default(now())

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Permission {
  id              String              @id @default(cuid())
  action          PermissionAction
  resource        PermissionResource?
  isWildcard      Boolean             @default(false)
  rolePermissions RolePermission[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@unique([action, resource])
}

enum PermissionAction {
  READ
  UPDATE
  DELETE
  CREATE
}

enum PermissionResource {
  POST
}

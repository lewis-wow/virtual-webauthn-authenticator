import { UserVerificationRequirementSchema } from '@repo/enums';
import type { IPublicKeyCredentialRequestOptions } from '@repo/types';
import z from 'zod';

import { Base64URLBufferSchema } from '../Base64URLBufferSchema.js';
import { AuthenticationExtensionsClientInputsSchema } from './AuthenticationExtensionsClientInputsSchema.js';
import { PublicKeyCredentialDescriptorSchema } from './PublicKeyCredentialDescriptorSchema.js';

export const PublicKeyCredentialRequestOptionsSchema = z
  .object({
    challenge: Base64URLBufferSchema.meta({ description: 'A random string generated by the server.' }),
    allowCredentials: z.array(PublicKeyCredentialDescriptorSchema).optional(),
    timeout: z.number().optional(),
    rpId: z.string().optional(),
    userVerification: UserVerificationRequirementSchema.optional(),
    extensions: AuthenticationExtensionsClientInputsSchema.optional(),
  })
  .meta({
    description: 'Options for requesting a public key credential.',
  }) satisfies z.ZodType<IPublicKeyCredentialRequestOptions>;

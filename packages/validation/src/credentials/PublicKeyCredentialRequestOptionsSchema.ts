import { UserVerificationRequirementSchema } from '@repo/enums';
import z from 'zod';

import { see } from '../meta/see.js';
import { Base64URLBufferSchema } from '../transformers/Base64URLBufferSchema.js';
import { AuthenticationExtensionsClientInputsSchema } from './AuthenticationExtensionsClientInputsSchema.js';
import { PublicKeyCredentialDescriptorSchema } from './PublicKeyCredentialDescriptorSchema.js';

/**
 * The PublicKeyCredentialRequestOptions dictionary supplies get() with the data it needs to generate an assertion.
 * Its challenge member MUST be present, while its other members are OPTIONAL.
 *
 * @see https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialrequestoptions
 */
export const PublicKeyCredentialRequestOptionsSchema = z
  .object({
    /**
     * This member represents a challenge that the selected authenticator signs,
     * along with other data, when producing an authentication assertion.
     */
    challenge: Base64URLBufferSchema.meta({
      description: 'A random string generated by the server.',
    }),
    allowCredentials: z.array(PublicKeyCredentialDescriptorSchema).optional(),
    timeout: z.number().optional(),
    rpId: z.string().optional(),
    userVerification: UserVerificationRequirementSchema.optional(),
    extensions: AuthenticationExtensionsClientInputsSchema.optional(),
  })
  .meta({
    id: 'PublicKeyCredentialRequestOptions',
    description: `Options for requesting a public key credential. ${see(
      'https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialrequestoptions'
    )}`,
  });

export type PublicKeyCredentialRequestOptions = z.infer<
  typeof PublicKeyCredentialRequestOptionsSchema
>;

